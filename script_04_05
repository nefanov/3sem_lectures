Потоки (окончание).
==

Есть ОС, в которых поддержка потоков реализована на уровне ядра (См. линукс с clone). А есть где только в пространстве пользователя.

Если потоки поддержаны ядром, то ресурсы выделяются попроцессно -- всем нитям исполнения, а вот время исполнения выделяется попоточно.

Если же на уровне библиотек -- ядро считает, что есть только процессы. В этом случае время выделяется процессу целиком, а пользовательская библиотека сама должна разделять время между потоками.

Идея потоков круто стрельнула, когда появились многоядерные системы -- псевдопараллелизм превратился в настоящий параллелизм.

Алгоритмы синхронизации
==

Итак, ОС должна обеспечить санкционированное взаимодействие между процессами. Но нужно ли что-то менять в самих процессах, если они взаимодействуют?

Пример: у нас есть БД, и мы написали программу для работы с ней. В 1 процесс проблем нет.
Но если у нас процессов несколько, то процессы могут взаимодействовать, даже не зная об этом.

1) Активности и атомарные операции. Активность -- _последовательное_ выполнение ряда действий, направленных на достижение определенной цели.

Приготовление бутерброда:

1-2-3-4 -- атомарные операции. Если исполннитель выполняет такую операцию, он не имеет права переключаться на другое действие, пока текущая операция не будет завершена.

Если уже приступил к выполнению действия, то не отвлекаешься, пока не закончишь его.

Допустим, у нас есть активность P={a,b,c}, Q={d,e,f}. Если нам надо достичь обеих целей, то можем
выполнить в порядке PQ: abcdef.


